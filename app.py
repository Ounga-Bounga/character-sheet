import streamlit as st
import json
from typing import List, Dict, Tuple

# =========================
# Config
# =========================
st.set_page_config(
    page_title="Cr√©ateur de fiche de personnage",
    page_icon="üé≤",
    layout="wide",
    initial_sidebar_state="expanded",
)

# =========================
# Styles
# =========================
st.markdown(
    """
    <style>
      h1, h2, h3 { text-align: center !important; }
      .muted { opacity: 0.8; font-size: 0.9rem; }
      .card {
        border-radius: 16px; padding: 1rem 1.2rem; border: 1px solid #e7e7e9;
        box-shadow: 0 1px 8px rgba(0,0,0,0.04); background: white; margin-bottom: .75rem;
      }
      .mono { font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;}
      .grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(220px,1fr)); gap: .75rem; }
    </style>
    """,
    unsafe_allow_html=True,
)

# =========================
# Constants
# =========================
POSTURES: Dict[str, str] = {
    "Posture Agressive": "‚Ä¢ Armes: d√©g√¢ts max +1\n‚Ä¢ Critiques: passe √† 10 %",
    "Posture Defensive": "‚Ä¢ Peut parer/esquiver sur jet de Physique r√©ussi",
    "Posture Focus": "‚Ä¢ Sorts co√ªtent 1 PM en moins\n‚Ä¢ +5 % √† toutes les caract√©ristiques",
}

CLASSES = {
    "Lourde": {"pv_mod": +4, "pm_mod": -2, "sorts": 1, "desc": "+4 PV | -2 PM | 1 sort"},
    "Moyenne": {"pv_mod": +1, "pm_mod": +1, "sorts": 2, "desc": "+1 PV | +1 PM | 2 sorts"},
    "L√©g√®re": {"pv_mod": -3, "pm_mod": +3, "sorts": 3, "desc": "-3 PV | +3 PM | 3 sorts"},
}

BASE_PV, BASE_PM = 6, 4
STATS_MIN, STATS_MAX, STATS_STEP, STATS_TOTAL = 30, 70, 5, 170

ALIGNMENTS = [
    "Loyal bon ‚Äî Crois√©",
    "Neutre bon ‚Äî Bienfaiteur",
    "Chaotique bon ‚Äî Rebelle",
    "Loyal neutre ‚Äî Juge",
    "Neutre strict ‚Äî R√©conciliateur",
    "Chaotique neutre ‚Äî Esprit libre",
    "Loyal mauvais ‚Äî Dominateur",
    "Neutre mauvais ‚Äî Malfaisant",
    "Chaotique mauvais ‚Äî Destructeur",
]

SKILLS = [
    "Discr√©tion +10 %", "Combats aux lames +10 %", "Artisanat +10 %", "Persuasion +10 %",
    "Tromperie +10 %", "Arcane +10 %", "Survie +10 %", "Athl√©tisme +10 %",
    "Perception +10 %", "Histoire +10 %", "Botanique +10 %", "M√©canisme +10 %",
    "Natation +10 %", "Pilotage +10 %", "N√©gociation +10 %", "Investigation +10 %",
    "Intimidation +10 %", "Danse +10 %", "Acrobatie +10 %", "Soin +10 %", "Autre"
]

WEAPONS = [
    "1d4 - dague/poing", "1d6 - √©p√©e/arc", "1d8 - √©p√©e longue",
    "1d10 - √©p√©e √† deux mains", "1d12 - arbal√®te lourde", "Fusil/Pistolet (recharge mouvement)"
]

ARMORS = ["Prot√®ge 3 (armure lourde)", "Prot√®ge 2 (armure moyenne)", "Prot√®ge 1 (armure l√©g√®re)"]

EQUIPMENT = [
    "Corde 10m", "Torche", "Sac √† dos", "Tente", "Rations (1 jour)", "Trousse de soin",
    "Bourse de pi√®ces", "Grappin", "Plume et encre", "Livre de sorts", "Bottes de voyage",
    "Amulette de protection", "Potion de soin", "Carte de la r√©gion", "B√¢ton de marche",
    "Lanterne", "Tenue de camouflage", "Couteau de lancer", "Fiole d'huile", "Autre"
]

# =========================
# Title
# =========================
st.markdown("<h1>‚ú® Abra Cadabra ‚ú®</h1>", unsafe_allow_html=True)
st.header("Cr√©er ton personnage lvl 1 !")

# =========================
# Helpers
# =========================
def compute_hp_mp(class_key: str) -> Tuple[int, int]:
    mods = CLASSES.get(class_key, {"pv_mod": 0, "pm_mod": 0})
    return BASE_PV + mods["pv_mod"], BASE_PM + mods["pm_mod"]

def clean_choices(choices: List[str]) -> List[str]:
    """Removes placeholders and empties, keeps unique order."""
    out, seen = [], set()
    for c in choices:
        c = (c or "").strip()
        if not c or c == "‚îÄ‚îÄ":
            continue
        if c not in seen:
            seen.add(c)
            out.append(c)
    return out

# =========================
# PREVIEW SECTIONS (infos AVANT choix)
# =========================
st.markdown("### üìò Comprendre vos choix (avant de s√©lectionner)")
# Postures preview
with st.expander("‚öîÔ∏è Postures ‚Äî effets d√©taill√©s", expanded=True):
    st.markdown("<div class='grid'>", unsafe_allow_html=True)
    for name, desc in POSTURES.items():
        st.markdown(f"<div class='card'><b>{name}</b><br><span class='muted'>{desc.replace(chr(10), '<br>')}</span></div>", unsafe_allow_html=True)
    st.markdown("</div>", unsafe_allow_html=True)

# Classes preview with computed totals
with st.expander("üõ°Ô∏è Classes ‚Äî PV/PM & sorts", expanded=True):
    st.markdown(
        f"<div class='muted'>Base: <span class='mono'>PV {BASE_PV} / PM {BASE_PM}</span>. "
        f"Les valeurs ci-dessous montrent le total <i>apr√®s</i> modificateurs de classe.</div>",
        unsafe_allow_html=True,
    )
    st.markdown("<div class='grid'>", unsafe_allow_html=True)
    for name, meta in CLASSES.items():
        pv, pm = compute_hp_mp(name)
        st.markdown(
            f"<div class='card'><b>{name}</b><br>"
            f"<div>PV totaux: <span class='mono'>{pv}</span> &nbsp;|&nbsp; PM totaux: <span class='mono'>{pm}</span></div>"
            f"<div class='muted'>{meta['desc']} ‚Ä¢ Sorts √† choisir: {meta['sorts']}</div></div>",
            unsafe_allow_html=True,
        )
    st.markdown("</div>", unsafe_allow_html=True)

# Stats rules preview
with st.expander("üìä R√®gles des caract√©ristiques (Physique / Mental / Social)", expanded=True):
    st.markdown(
        f"""
        <div class='card'>
          <ul>
            <li>Chaque caract√©ristique varie de <b>{STATS_MIN}%</b> √† <b>{STATS_MAX}%</b> (pas de {STATS_STEP}%).</li>
            <li>La somme <b>doit</b> faire exactement <b>{STATS_TOTAL}%</b>.</li>
            <li>Certains choix (ex: <i>Posture Focus</i>) peuvent donner <b>+5%</b> aux caract√©ristiques.</li>
          </ul>
          <div class='muted'>Astuce: commence √† 30/30/30 puis r√©partis le reste vers ton style de jeu.</div>
        </div>
        """,
        unsafe_allow_html=True,
    )

# =========================
# Form
# =========================
with st.form("builder", clear_on_submit=False):
    col1, col2, col3, col4 = st.columns(4)

    with col1:
        st.markdown("**ü§ñ Comment t'appelles-tu ?**")
        nom = st.text_input("Nom du personnage", key="nom")

    with col2:
        st.markdown("**‚öîÔ∏è Choisis ta posture de base**")
        posture = st.selectbox("Posture", ["‚îÄ‚îÄ"] + list(POSTURES.keys()), key="posture")

        # Indication visible AVANT/pendant le choix (persistante)
        if posture == "‚îÄ‚îÄ":
            st.info("S√©lectionne une posture. Voir le d√©tail dans ¬´ Postures ‚Äî effets d√©taill√©s ¬ª ci-dessus.")
        else:
            st.markdown(
                f"<div class='card'><div style='white-space:pre-line;'>{POSTURES[posture]}</div></div>",
                unsafe_allow_html=True
            )

    with col3:
        st.markdown("**üõ°Ô∏è Choisis ton type de classe**")
        classe = st.selectbox("Classe", ["‚îÄ‚îÄ"] + list(CLASSES.keys()), key="classe")

        # Indication visible AVANT/pendant le choix (persistante)
        if classe == "‚îÄ‚îÄ":
            st.info("S√©lectionne une classe. Les PV/PM totaux et le nombre de sorts sont indiqu√©s au-dessus.")
        else:
            pv_preview, pm_preview = compute_hp_mp(classe)
            st.markdown(
                f"<div class='card'>PV totaux: <span class='mono'>{pv_preview}</span> ‚Ä¢ "
                f"PM totaux: <span class='mono'>{pm_preview}</span><br>"
                f"<span class='muted'>{CLASSES[classe]['desc']} ‚Ä¢ Sorts: {CLASSES[classe]['sorts']}</span></div>",
                unsafe_allow_html=True,
            )

    with col4:
        # Affiche PV/PM en temps r√©el selon la classe
        pv, pm = compute_hp_mp(classe) if classe != "‚îÄ‚îÄ" else (BASE_PV, BASE_PM)
        st.markdown("**‚ù§Ô∏è Tes PV & PM (aper√ßu)**")
        st.metric("ü©∏ PV", pv)
        st.metric("‚ú® PM", pm)

    # ====== Stats
    st.markdown("<h2>üìä Choisis tes Caract√©ristiques</h2>", unsafe_allow_html=True)
    st.caption("Lis d'abord les r√®gles ci-dessus ‚Äî la somme doit √™tre exactement 170 %.")

    stats_col1, stats_col2, stats_col3 = st.columns(3)
    with stats_col1:
        physique = st.slider("üí™ Physique", STATS_MIN, STATS_MAX, 30, step=STATS_STEP, key="physique")
    with stats_col2:
        mental = st.slider("üß† Mental", STATS_MIN, STATS_MAX, 30, step=STATS_STEP, key="mental")
    with stats_col3:
        social = st.slider("üó£Ô∏è Social", STATS_MIN, STATS_MAX, 30, step=STATS_STEP, key="social")

    total_stats = physique + mental + social
    remaining = STATS_TOTAL - total_stats
    if remaining > 0:
        st.info(f"Il reste {remaining}% √† r√©partir.")
    elif remaining < 0:
        st.error(f"Tu as d√©pass√© de {-remaining}%. R√©duis tes statistiques.")
    else:
        st.success("Parfait, tu es √† 170 %.")

    # ====== Alignement
    st.markdown("<h2>üåó Choisis ton Alignement</h2>", unsafe_allow_html=True)
    st.markdown(
        "<div class='muted'>Pour des actions conformes √† tes principes, tu peux obtenir un bonus critique.</div>",
        unsafe_allow_html=True,
    )
    alignment = st.selectbox("Alignement", ["‚îÄ‚îÄ"] + ALIGNMENTS, key="alignment")

    # ====== Comp√©tences
    st.markdown("<h2>üìù Choisis tes Bonus de Comp√©tences</h2>", unsafe_allow_html=True)
    comp_cols = st.columns(4)
    selected_skills: List[str] = []
    for i in range(4):
        with comp_cols[i]:
            choix = st.selectbox(f"Comp√©tence {i+1}", ["‚îÄ‚îÄ"] + SKILLS, key=f"comp{i+1}")
            if choix == "Autre":
                autre = st.text_input("Pr√©cisez", key=f"comp_autre_{i}")
                if autre:
                    selected_skills.append(autre.strip())
            else:
                selected_skills.append(choix)
    selected_skills = clean_choices(selected_skills)
    if len(selected_skills) < 4:
        st.warning("S√©lectionne 4 comp√©tences uniques (ou pr√©cise tes 'Autre').")

    # ====== Sorts
    sorts = []
    num_sorts = CLASSES.get(classe, {"sorts": 0}).get("sorts", 0) if classe != "‚îÄ‚îÄ" else 0
    if num_sorts > 0:
        st.markdown("<h2>ü™Ñ Choisis tes Sorts</h2>", unsafe_allow_html=True)
        sort_cols = st.columns(num_sorts)
        for idx, col in enumerate(sort_cols):
            with col:
                st.markdown(f"**Sort {idx+1}**")
                nom_sort = st.text_input(f"Nom du sort {idx+1}", key=f"nom_sort_{idx}")
                cout_pm = st.number_input(f"Co√ªt en PM (sort {idx+1})", min_value=0, step=1, key=f"cout_sort_{idx}")
                desc_sort = st.text_area(f"Description du sort {idx+1}", key=f"desc_sort_{idx}")
                if nom_sort:
                    sorts.append({"nom": nom_sort.strip(), "cout_pm": int(cout_pm), "description": desc_sort.strip()})
        if len(sorts) < num_sorts:
            st.info(f"Renseigne {num_sorts} sort(s) au total.")

    # ====== Armes & Armure
    st.markdown("<h2>üõ†Ô∏è Arme & Armure</h2>", unsafe_allow_html=True)
    arm_cols = st.columns(3)
    with arm_cols[0]:
        arme1 = st.selectbox("Arme principale", ["‚îÄ‚îÄ"] + WEAPONS, key="arme1")
    with arm_cols[1]:
        arme2 = st.selectbox("Arme secondaire", ["‚îÄ‚îÄ"] + WEAPONS, key="arme2")
    with arm_cols[2]:
        armure = st.selectbox("Type d'armure", ["‚îÄ‚îÄ"] + ARMORS, key="armure")

    # ====== √âquipement
    st.markdown("<h2>üéí √âquipement (8 objets)</h2>", unsafe_allow_html=True)
    eq_cols = st.columns(2)
    equipement: List[str] = []
    for c_idx, c in enumerate(eq_cols):
        for i in range(4):
            key = f"equip_{c_idx}_{i}"
            choix_eq = c.selectbox(f"√âquipement {c_idx*4 + i + 1}", ["‚îÄ‚îÄ"] + EQUIPMENT, key=key)
            if choix_eq == "Autre":
                autre = c.text_input("Pr√©cisez autre √©quipement", key=f"{key}_autre")
                if autre:
                    equipement.append(autre.strip())
            else:
                equipement.append(choix_eq)
    equipement = clean_choices(equipement)

    submitted = st.form_submit_button("Valider la cr√©ation")

# =========================
# Validation (sans g√©n√©ration JSON)
# =========================
if submitted:
    errors = []

    if not (nom or "").strip():
        errors.append("Le nom du personnage est requis.")
    if remaining != 0:
        errors.append("La somme des caract√©ristiques doit √™tre exactement 170%.")
    if len(selected_skills) != 4:
        errors.append("Tu dois s√©lectionner exactement 4 comp√©tences uniques.")
    if alignment == "‚îÄ‚îÄ":
        errors.append("Choisis un alignement.")
    if arme1 == "‚îÄ‚îÄ":
        errors.append("Choisis une arme principale.")
    if armure == "‚îÄ‚îÄ":
        errors.append("Choisis un type d'armure.")
    if (classe or "‚îÄ‚îÄ") != "‚îÄ‚îÄ" and num_sorts > 0 and len(sorts) < num_sorts:
        errors.append("Renseigne tous les sorts correspondant √† ta classe.")

    if errors:
        for e in errors:
            st.error(e)
    else:
        st.success("‚úÖ Personnage valid√© ! (sortie JSON supprim√©e comme demand√©)")
